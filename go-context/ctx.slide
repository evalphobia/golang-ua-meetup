Context package in Go
20 Sep 2016
Tags: go, golang, context, http

Dmytro Kondratovych
Gopher, SeeSawLabs
dmytro.kondratovych@gmail.com
@dkondratovych

* Some history

The idea to created Context was posted by [[https://groups.google.com/forum/#!msg/golang-nuts/teSBtPvv1GQ/U12qA9N51uIJ][Brad Fitzpatrick]] to the go-nuts mailing list back in 2011.

Later package Context was developed in Google to make it easy to pass request specific values, cancelation, timeout and deadline signals to all goroutines involved in handling a request. Package started it's life under *golang.org/x/net/context*

After become more popular and proven to be essential to many Go applications, package was moved [[https://github.com/golang/go/issues/14660][(GitHub issue)]] to standart library and named *context* since context by itself has little to do with networking by itself. 

In Go 1.7 support for contexts has been added to the [[https://golang.org/pkg/net/][net]], [[https://golang.org/pkg/net/http/][net/http]], and [[https://golang.org/pkg/os/exec/][os/exec]] packages.


* Context interface

	type Context interface {
	    // Deadline returns the time when work done
	    // on behalf of this context should be canceled.
	    Deadline() (deadline time.Time, ok bool)

	    // Done returns a channel that's closed when work done 
	    // on behalf of this context should be canceled.
	    Done() <-chan struct{}

	    // Err returns a non-nil error value after Done is closed.
	    Err() error

	    // Value returns the value associated with this context for key
	    Value(key interface{}) interface{}
	}


* Context functions

	func Background() Context

	func TODO() Context

	func WithCancel(parent Context) (ctx Context, cancel CancelFunc)

	func WithDeadline(parent Context, deadline time.Time) (Context, CancelFunc)

	func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)

	func WithValue(parent Context, key, val interface{}) Context


* How to create context ? (1/1)


Before Go 1.7 to create and pass context throw middleware chain and access it in handler, you had to choose between three possible options
- use a global request-to-context mapping
- create a http.ResponseWriter wrapper struct
- create your own handler types


In Go 1.7 it become more easily and clear to create context. Context become a part of *http.Request*. 

* How to create context ? (1/2)

.code examples/create_context.go /func middleware/,/^}/


* How to access context in handler ?
.code examples/create_context.go /func handleRequest/,/STOP/


* context.WithValue (1/1)

	func WithValue(parent Context, key, val interface{}) Context

WithValue returns a copy of parent in which the value associated with key is val.

Use context Values only for request-scoped data that transits processes and APIs, not for passing optional parameters to functions or like dependecy injection container.

* context.WithValue (1/2)

Context key should be unexported type for keys defined in this package. This prevents collisions with keys defined in other packages.


	package user

	type contextKey int

	var userKey contextKey = 0


You can have multiple package.contextKey type variables per one package, just make sure that provided strings, numbers are not collide. 

	package user

	type contextKey string

	var userProfileKey = contextKey("user-profile")
	var userKey = contextKey("user")

* context.WithValue(1/3)
Since context keys are unexported you have to use helper functions to set and get value from the context.

.code examples/user/user.go /type contextKey/,/STOP/

* context.WithValue(1/4)
An example how to write to context

.code examples/context_with_value.go /func setUserMiddleware/,/STOP1/ 

* context.WithValue(1/5)
An example how to read from context

.code examples/context_with_value.go /func handleUserRequest/,/STOP/ 


* What to put into context ? (1/1)

[[https://blog.golang.org/context][Go Blog]] says us to put into context: 
- user identity
- authorization tokens
- request-scoped values

Basically all data durint request lifetime can be treated as request-scoped - that's the main problem. It adds uncertanty what is appropriate to put into context and what is not.

In addition context may be used to store specific values: 
- request id
- user ip
- session id
- cookies

* What to put into contxt ? (1/2)

.image images/context_in_google.png 550 _


* What you should remember before set anything into context ?

- It’s completely type-unsafe, you get interface{} from the context.
- Cannot be checked by the compiler. 
- Doesn't make dependecies explicit. User have to read the implementation, what is not good.
- Context.Value obscures your program’s flow


* Do not "over context" 

Try to keep dependecies explicit. Make functions easty to read, test and checkable by the compiler.

	// Function dependecy is not clear, avoid using context like this
	func calculatePaysleep(ctx context.Contex) int64 {
		user := user.UserMustFromContext(ctx)
		rate := rate.RateMustFromContext(ctx)
		work := work.WorkFromContext(ctx)

		return user * rate * work
	}


* What Go community members recommend to set into context ? (1/1)

[[http://peter.bourgon.org/blog/2016/07/11/context.html][Peter Bourgon]] recommends use context to store values, like strings and data structs and avoid using it to store references, like pointers and handlers. Also store logger onlt request-scoped logger, if needed.

* What Go community members recommend to set into context ? (1/2)

[[https://medium.com/@cep21/how-to-correctly-use-context-context-in-go-1-7-8f2c0fafdf39#.85mq6xwv6][Jack Lindamood]] recomends to store request scooped data related to who is making the request (user ID), how they are making it (internal or external), from where they are making it (user IP) and how important this request should be.

A database connection may be considered request-scooped if it contains some metadata about current user.
A logger may be considered request-scooped if it contains metadata about who sent the request.

Context.Value should inform, not control application flow. For example if your function can’t behave correctly because of a value that may or may not be inside context.Value, then your API is obscuring required inputs too heavily. 

* So what should I do?

There is no bulletproof rules what to store in the context! Try, analyse and then make your own dicisigins what is good or bad for your particular project.


* Logger in the context (1/1)

You can extend your base logger with request specific fields and provide an interface to create request scoped logger.

.code examples/logger/logger.go /START1/,/STOP1/ 


* Logger in the context (1/2)

Base logger can be created with default/known values.

.code examples/logger/logger.go /START1A/,/STOP1A/ 

And request scoped logger interface implementation will look like.
.code examples/logger/logger.go /START2/,/STOP2/ 

* Logger in the context (1/3)

You have to init request scoped logger in the middleware 

.code examples/logger_in_context.go /START1/,/STOP1/ 

* Logger in the context (1/4)

An example how to access logger from the context

.code examples/logger_in_context.go /START2/,/STOP2/ 


* Database in the context (1/1)
Store database connection pool in the context is contraversial decigion. For sure database by itself is not request scoped, but database transactions is kind of related for request lifetime data. 

As an example lets see how it looks to store database in the context and how this approach may simplify sharing database tranasction across functions.


* Database in the context (1/2)

MustBeginTransaction starts transaction and creates new database instance

.code examples/database/database.go /START1/,/STOP1/ 

* Database in the context (1/3)

To make Commit and Rollback working with *sql.DB we need to do some type assertion

.code examples/database/database.go /START2/,/STOP2/ 

* Database in the context (1/4)
You have to set DB into context in the middleware.

.code examples/database_in_the_context.go /START1/,/STOP1/ 

* Database in the context (1/5)
.code examples/database/context.go /START1/,/STOP1/ 

* Database in the context (1/6)
.code examples/database_in_the_context.go /START2/,/STOP2/ 


* Blocking and long running operations (1/1)

You should always have ability to cancel long running and blocking operations because function may work longer that we actually need.

* Why should I care about blocking / long running operations ? (1/2)

.code examples/go_keep_alive.go /START1/,/STOP1/ 


* What can I do with this ? (1/3)

.code examples/go_keep_alive_1.go /START1/,/STOP1/ 

* How can I explicitly cancel context ?

.code examples/cancel_ctx.go /START1/,/STOP1/ 

* How can I use WithTimeout and WithDeadline ?

Context with timeout

	ctx, cancel = context.WithTimeout(ctx, time.Duration(7 * time.Second))
	defer cancel()

Context with deadline

	deadline := time.Now().Add(time.Duration(30 * time.Second))
	dctx, cancel := context.WithDeadline(ctx, deadline)
	defer cancel()

Pattern here is the same, you have to wait for signal from ctx.Done

	select {
	case <-ctx.Done():
		log.Print(ctx.Err())
		return
	case result := <-longRunningCalculation():
		io.WriteString(w, result)
	}



* Context in outgoing client requests (1/1)

.code examples/ctx_and_http_client.go /START1/,/STOP2/ 

* golang.org/x/net/context package usage

.iframe https://godoc.org/golang.org/x/net/context?importers 600 1000

* context package usage

.iframe https://godoc.org/context?importers 600 1000